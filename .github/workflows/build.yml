name: "Build (GCC/Clang/MSVC)"

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "linux: clang",
            cc: "clang",
            cxx: "clang++"
          }
          - {
            name: "linux: gcc",
            cc: "gcc-10",
            cxx: "g++-10"
          }

    steps:
      - uses: actions/checkout@v2

      - name: Create Build Environment
        shell: bash
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          # Add lunarg apt sources
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-focal.list https://packages.lunarg.com/vulkan/lunarg-vulkan-focal.list

          # Update package lists
          sudo apt-get update -qq
          
          # Install GCC 10 (required for concepts)
          sudo apt-get install -y \
            gcc-10 \
            g++-10

          # Install dependencies
          sudo apt-get install -y \
            vulkan-sdk

          cmake -E make_directory ${{ runner.workspace }}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE $GITHUB_WORKSPACE

      - name: Build
        shell: bash
        working-directory: ${{ runner.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE

  windows:
    name: ${{ matrix.config.name }}
    runs-on: windows-latest
    env:
      vulkan_sdk: "$GITHUB_WORKSPACE/vulkan_sdk/"
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "windows: msvc",
            cc: "cl",
            cxx: "cl"
          }

    steps:
      # apparently checkout@v2 pulls to ${{ github.repository.name }}/${{ github.repository.name }} on windows
      - uses: actions/checkout@v2

      - name: Create Build Environment
        # apparently checkout@v2 pulls to ${{ github.event.repository.name }}/${{ github.event.repository.name }} on windows
        working-directory: ${{ runner.workspace }}/${{ github.event.repository.name }}
        shell: pwsh
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          curl -LS -o vulkan-sdk.exe https://sdk.lunarg.com/sdk/download/latest/windows/VulkanSDK-Installer.exe

          7z x vulkan-sdk.exe -o"${{ env.vulkan_sdk }}"

          # apparently checkout@v2 pulls to ${{ github.repository.name }}/${{ github.repository.name }} on windows
          cmake -E make_directory ${{ runner.workspace }}/${{ github.event.repository.name }}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: pwsh
        # apparently checkout@v2 pulls to ${{ github.repository.name }}/${{ github.repository.name }} on windows
        working-directory: ${{ runner.workspace }}/${{ github.event.repository.name }}/build
        run: |
          $env:CC="${{ matrix.config.cc }}"
          $env:CXX="${{ matrix.config.cxx }}"
          $env:Path += ";${{ env.vulkan_sdk }}\;${{ env.vulkan_sdk }}\Bin\"

          # apparently checkout@v2 pulls to ${{ github.repository.name }}/${{ github.repository.name }} on windows
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{ runner.workspace }}/${{ github.event.repository.name }} -G "Visual Studio 16 2019" -A x64

      - name: Build
        shell: bash
        # apparently checkout@v2 pulls to ${{ github.repository.name }}/${{ github.repository.name }} on windows
        working-directory: ${{ runner.workspace }}/${{ github.event.repository.name }}/build
        run: cmake --build . --config $BUILD_TYPE
